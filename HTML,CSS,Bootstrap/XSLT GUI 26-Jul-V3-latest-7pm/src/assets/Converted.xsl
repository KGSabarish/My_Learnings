
<xsl:stylesheet version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:custom="http://psyncopate.io/custom" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:saxon="http://saxon.sf.net/"   xmlns:pfx6="http://schema.jcpenney.com/Technical/SA/jcppos_sales_publisher_v1/v1" xmlns:pfx7="http://schema.jcpenney.com/Technical/SA/Local_POSSubscriberSchema/v1" xmlns:pfx8="http://schema.jcpenney.com/Technical/SA/JCPPOS_Txn_Cnts/v1" xmlns:pfx="http://schema.jcpenney.com/Technical/SA/jcppos_sales_publisher/v1" xmlns:ns="urn:schemas-microsoft-com:datatypes" xmlns:pfx3="http://schema.jcpenney.com/Technical/SA/jcppos_sales_fields/v1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns2="http://schema.jcpenney.com/Technical/SA/jcppos_sales_components/v1" xmlns:ns1="http://schema.jcpenney.com/Technical/common/jcp_common_components/v1" xmlns:ns3="http://schema.jcpenney.com/Technical/common/jcp_metadata_fields/v1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns6="http://schema.jcpenney.com/Technical/common/jcp_common_fields/v1" xmlns:ns14="http://www.jcp.com/schemas/BWCLER/LogMessage">
<xsl:template match="/">
            <pfx6:JCPPOSPublisher>
                <ns1:MetaData>
                    <ns3:Version>
                        <xsl:value-of select="&quot;1.0&quot;"/>
                    </ns3:Version>
                    <ns3:SourceID>
                        <xsl:value-of select="&quot;MobileTerminalAutoLocked&quot;"/>
                    </ns3:SourceID>
                    <ns3:CreateTimeStamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns3:CreateTimeStamp>
                </ns1:MetaData>
                <ns2:TransactionHead>
                    <ns2:TransactionKey>
                        <pfx3:StoreNum>
                            <xsl:value-of select="/root/POS/Store"/>
                        </pfx3:StoreNum>
                        <pfx3:SourceCode>
                            <xsl:value-of select="&quot;01&quot;"/>
                        </pfx3:SourceCode>
                        <pfx3:BusinessTimestamp>
                            <xsl:value-of select="format-dateTime(xs:dateTime(/root/POS/SysDate),&quot;[Y][M02][D02]&quot;)"/>
                        </pfx3:BusinessTimestamp>
                        <xsl:choose>
                            <xsl:when test="exists(/root/POS/WkStn)">
                                <pfx3:TerminalNum>
                                    <xsl:value-of select="/root/POS/WkStn"/>
                                </pfx3:TerminalNum>
                            </xsl:when>
                            <xsl:otherwise>
                                <pfx3:TerminalNum>
                                    <xsl:value-of select="&quot;0&quot;"/>
                                </pfx3:TerminalNum>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:choose>
                            <xsl:when test="exists(/root/POS/Tran)">
                                <pfx3:TransNum>
                                    <xsl:if test="/root/POS/Tran/@ns:dt">
                                        <xsl:attribute name="type">
                                            <xsl:value-of select="/root/POS/Tran/@ns:dt"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="/root/POS/Tran"/>
                                </pfx3:TransNum>
                            </xsl:when>
                            <xsl:otherwise>
                                <pfx3:TransNum>
                                    <xsl:value-of select="0"/>
                                </pfx3:TransNum>
                            </xsl:otherwise>
                        </xsl:choose>
                        <pfx3:TerminalTimestamp>
                            <xsl:value-of select="format-dateTime(xs:dateTime(/root/POS/Time),&quot;[Y][M02][D02][H][m02][s02]&quot;)"/>
                        </pfx3:TerminalTimestamp>
                    </ns2:TransactionKey>
                    <pfx3:AssocNum>
                        <xsl:value-of select="&quot;9999&quot;"/>
                    </pfx3:AssocNum>
                    <pfx3:TransTypeCode>
                        <xsl:value-of select="&quot;24&quot;"/>
                    </pfx3:TransTypeCode>
                    <pfx3:TransSubType>
                        <xsl:value-of select="&quot;0&quot;"/>
                    </pfx3:TransSubType>
                    <pfx3:TransTotalAmount>
                        <xsl:value-of select="0"/>
                    </pfx3:TransTotalAmount>
                    <pfx3:CatalogInvoiceNum>
                        <xsl:value-of select="&quot; &quot;"/>
                    </pfx3:CatalogInvoiceNum>
                    <pfx3:TransVoidStatus>
                        <xsl:value-of select="&quot;0&quot;"/>
                    </pfx3:TransVoidStatus>
                    <pfx3:AssocDiscountInd>
                        <xsl:value-of select="&quot;N&quot;"/>
                    </pfx3:AssocDiscountInd>
                    <pfx3:LineItemCnt>
                        <xsl:value-of select="0"/>
                    </pfx3:LineItemCnt>
                    <pfx3:PriceAdjCnt>
                        <xsl:value-of select="0"/>
                    </pfx3:PriceAdjCnt>
                    <pfx3:TenderCnt>
                        <xsl:value-of select="0"/>
                    </pfx3:TenderCnt>
                    <pfx3:BiometricCnt>
                        <xsl:value-of select="0"/>
                    </pfx3:BiometricCnt>
                    <pfx3:CouponCnt>
                        <xsl:value-of select="0"/>
                    </pfx3:CouponCnt>
                    <pfx3:ReceiptsCnt>
                        <xsl:value-of select="0"/>
                    </pfx3:ReceiptsCnt>
                    <pfx3:ThrowSlipCnt>
                        <xsl:value-of select="0"/>
                    </pfx3:ThrowSlipCnt>
                    <pfx3:ReceivableInd>
                        <xsl:value-of select="&quot;N&quot;"/>
                    </pfx3:ReceivableInd>
                    <xsl:choose>
                        <xsl:when test="exists(/root/POS/TRADE/IsAbort)">
                            <pfx3:VoidInfoInd>
                                <xsl:value-of select="&quot;Y&quot;"/>
                            </pfx3:VoidInfoInd>
                        </xsl:when>
                        <xsl:otherwise>
                            <pfx3:VoidInfoInd>
                                <xsl:value-of select="&quot;N&quot;"/>
                            </pfx3:VoidInfoInd>
                        </xsl:otherwise>
                    </xsl:choose>
                    <pfx3:OrderType>
                        <xsl:value-of select="&quot;0&quot;"/>
                    </pfx3:OrderType>
                    <pfx3:GiftCardCnt>
                        <xsl:value-of select="0"/>
                    </pfx3:GiftCardCnt>
                    <xsl:choose>
                        <xsl:when test="exists(/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;ReturnAuthIndicator&quot;]/Data)">
                            <xsl:if test="/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;ReturnAuthIndicator&quot;]/Data">
                                <pfx3:ReturnAuthInd>
                                    <xsl:value-of select="/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;ReturnAuthIndicator&quot;]/Data"/>
                                </pfx3:ReturnAuthInd>
                            </xsl:if>
                        </xsl:when>
                        <xsl:otherwise>
                            <pfx3:ReturnAuthInd>
                                <xsl:value-of select="&quot; &quot;"/>
                            </pfx3:ReturnAuthInd>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="exists(/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;CashDrawerNumber&quot;]/Data)">
                            <pfx3:CashDrawerNum>
                                <xsl:value-of select="number(/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;CashDrawerNumber&quot;]/Data)"/>
                            </pfx3:CashDrawerNum>
                        </xsl:when>
                        <xsl:otherwise>
                            <pfx3:CashDrawerNum>
                                <xsl:value-of select="0"/>
                            </pfx3:CashDrawerNum>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="(&#xA;(&#xA;  &#x9;exists(/root/POS/TRADE/Amt)&#xA;        and&#xA;        exists(/root/POS/TRADE/GENINFO[Name=&quot;ManCatTotals&quot;]/FIELD[Name=&quot;Merchandise&quot;]/Data)&#xA;&#x9;and&#xA;&#x9;(&#xA;&#x9;exists(/root/POS/TRADE/IsAbort)&#xA;&#x9;and&#xA;&#x9;not(/root/POS/TRADE/GENINFO[Name=&quot;PrintGiftReceiptTran&quot;]/FIELD/Data)&#xA;&#x9;)&#xA;)&#xA;or&#xA;(&#xA;&#x9;exists(/root/POS/TRADE/Amt)&#xA;        and&#xA;        exists(/root/POS/TRADE/GENINFO[Name=&quot;ManCatTotals&quot;]/FIELD/Data)&#xA;        and&#xA;      (&#xA;         empty(/root/POS/TRADE/GENINFO[Name=&quot;JCPCPOS&quot;]/FIELD[Name=&quot;SendToSalesAudit&quot;]/Data)&#xA;          and&#xA;         empty(/root/POS/TRADE/GENINFO[Name=&quot;JCPCPOS&quot;]/FIELD[Name=&quot;CPOSUpdate&quot;]/Data)&#xA;      )&#xA;       &#xA;)&#xA;)&#xA;and&#xA;(/root/POS/TRADE/GENINFO[Name=&quot;FunctionScreenTitle&quot;]/FIELD[Name=&quot;FunctionScreenTitle&quot;]/Data=&quot;MANUAL CATALOG RETURN&quot;)&#xA;and&#xA;exists(/root/POS/TRADE/GENINFO[Name= &quot;ManCatReceiptInfo&quot;]/FIELD[Name=&quot;StoreNumber&quot;]/Data)">
                            <pfx3:PostalCode>
                                <xsl:value-of select="substring(custom:pad(/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;PostalCode&quot;]/Data,10,' '), 1,10)"/>
                            </pfx3:PostalCode>
                        </xsl:when>
                        <xsl:when test="(&#xA;     exists(/root/POS/TRADE/Amt)&#xA;     and&#xA;    (/root/POS/TRADE/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;TranType&quot;]/Data=&quot;FurniturePOS&quot;)&#xA;)&#xA;and&#xA;(&#xA;not(/root/POS/TRADE/GENINFO[Name=&quot;JCPCPOS&quot;]/FIELD[Name=&quot;TaxExemptID&quot;]/Data)&#xA;and&#xA;(&#xA;empty(/root/POS/TRADE/Amt)&#xA;and&#xA;not(/root/POS/TRADE/GENINFO[Name=&quot;JCPCPOS&quot;]/FIELD[Name=&quot;Mode&quot;]/Data=&quot;Return&quot;)&#xA;)&#xA;or&#xA;not(/root/POS/TRADE/GENINFO[Name=&quot;JCP_FPOS_ORDER&quot;]/FIELD[Name=&quot;ExemptFlag&quot;]/Data=&quot;Y&quot;)&#xA;or&#xA;not(/root/POS/TRADE/GENINFO[Name=&quot;JCP_FPOS_ORDER&quot;]/FIELD[Name=&quot;ExemptFlag&quot;]/Data)&#xA;)">
                            <pfx3:PostalCode>
                                <xsl:value-of select="substring(custom:pad(/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_FPOS_ORDER&quot;]/FIELD[Name=&quot;TaxRateZipCode&quot;]/Data,10,' '), 1,10)"/>
                            </pfx3:PostalCode>
                        </xsl:when>
                        <xsl:when test="(&#xA;(&#xA;  &#x9;exists(/root/POS/TRADE/Amt)&#xA;        and&#xA;        exists(/root/POS/TRADE/GENINFO[Name=&quot;ManCatTotals&quot;]/FIELD[Name=&quot;Merchandise&quot;]/Data)&#xA;&#x9;and&#xA;&#x9;(&#xA;&#x9;exists(/root/POS/TRADE/IsAbort)&#xA;&#x9;and&#xA;&#x9;not(/root/POS/TRADE/GENINFO[Name=&quot;PrintGiftReceiptTran&quot;]/FIELD/Data)&#xA;&#x9;)&#xA;)&#xA;or&#xA;(&#xA;&#x9;exists(/root/POS/TRADE/Amt)&#xA;        and&#xA;        exists(/root/POS/TRADE/GENINFO[Name=&quot;ManCatTotals&quot;]/FIELD/Data)&#xA;        and&#xA;      (&#xA;         empty(/root/POS/TRADE/GENINFO[Name=&quot;JCPCPOS&quot;]/FIELD[Name=&quot;SendToSalesAudit&quot;]/Data)&#xA;          and&#xA;         empty(/root/POS/TRADE/GENINFO[Name=&quot;JCPCPOS&quot;]/FIELD[Name=&quot;CPOSUpdate&quot;]/Data)&#xA;      )&#xA;       &#xA;)&#xA;)&#xA;and&#xA;exists(/root/POS/TRADE/GENINFO[Name=&quot;ManCat&quot;]/FIELD[Name=&quot;TaxChangeFlag&quot;]/Data)&#xA;and&#xA;not(/root/POS/TRADE/GENINFO[Name=&quot;FunctionScreenTitle&quot;]/FIELD[Name=&quot;FunctionScreenTitle&quot;]/Data=&quot;MANUAL CATALOG RETURN&quot;)">
                            <pfx3:PostalCode>
                                <xsl:value-of select="&quot;00000     &quot;"/>
                            </pfx3:PostalCode>
                        </xsl:when>
                        <xsl:when test="empty(/root/POS/TRADE/GENINFO[Name=&quot;TaxManualZip&quot;]/FIELD[Name=&quot;ZipCode&quot;]/Data)">
                            <pfx3:PostalCode>
                                <xsl:value-of select="substring(custom:pad(/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;PostalCode&quot;]/Data,10,' '), 1,10)"/>
                            </pfx3:PostalCode>
                        </xsl:when>
                        <xsl:otherwise>
                            <pfx3:PostalCode>
                                <xsl:value-of select="&quot; &quot;"/>
                            </pfx3:PostalCode>
                        </xsl:otherwise>
                    </xsl:choose>
                    <pfx3:TaxExemptInd>
                        <xsl:value-of select="&quot;N&quot;"/>
                    </pfx3:TaxExemptInd>
                    <xsl:choose>
                        <xsl:when test="exists(/root/POS/TRADE/IsPostVoid)">
                            <pfx3:Reasoncode>
                                <xsl:value-of select="1"/>
                            </pfx3:Reasoncode>
                        </xsl:when>
                        <xsl:otherwise>
                            <pfx3:Reasoncode>
                                <xsl:value-of select="&quot;0&quot;"/>
                            </pfx3:Reasoncode>
                        </xsl:otherwise>
                    </xsl:choose>
                    <pfx3:SignatureCnt>
                        <xsl:value-of select="0"/>
                    </pfx3:SignatureCnt>
                    <pfx3:OtherTaxCnt>
                        <xsl:value-of select="0"/>
                    </pfx3:OtherTaxCnt>
                    <pfx3:Sends>
                        <xsl:value-of select="&quot;N&quot;"/>
                    </pfx3:Sends>
                    <pfx3:CustomerPickup>
                        <xsl:value-of select="&quot;N&quot;"/>
                    </pfx3:CustomerPickup>
                    <pfx3:Authenticated>
                        <xsl:value-of select="&quot;N&quot;"/>
                    </pfx3:Authenticated>
                    <pfx3:TerminalRead>
                        <xsl:value-of select="&quot;N&quot;"/>
                    </pfx3:TerminalRead>
                    <pfx3:Donotreprocess>
                        <xsl:value-of select="&quot;0&quot;"/>
                    </pfx3:Donotreprocess>
                    <ns2:CustomerDetail>
                        <pfx3:StoreCustomer>
                            <xsl:value-of select="&quot;-1&quot;"/>
                        </pfx3:StoreCustomer>
                        <pfx3:CorpCustomer>
                            <xsl:value-of select="&quot; &quot;"/>
                        </pfx3:CorpCustomer>
                        <pfx3:CustomerPhoneNum>
                            <xsl:value-of select="&quot; &quot;"/>
                        </pfx3:CustomerPhoneNum>
                        <xsl:choose>
                            <xsl:when test="exists(/root/POS/TRADE/GENINFO[Name=&quot;JCP&quot;]/FIELD[Name=&quot;SephoraCRMID&quot;]/Data)">
                                <xsl:if test="/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP&quot;]/FIELD[Name=&quot;SephoraCRMID&quot;]/Data">
                                    <pfx3:SephoraBlId>
                                        <xsl:value-of select="/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP&quot;]/FIELD[Name=&quot;SephoraCRMID&quot;]/Data"/>
                                    </pfx3:SephoraBlId>
                                </xsl:if>
                            </xsl:when>
                            <xsl:when test="exists(/root/POS/TRADE/GENINFO[Name=&quot;JCP&quot;]/FIELD[Name=&quot;SephoraBINbr&quot;]/Data)">
                                <xsl:if test="/root/POS/TRADE/GENINFO[Name=&quot;JCP&quot;]/FIELD[Name=&quot;SephoraBINbr&quot;]/Data">
                                    <pfx3:SephoraBlId>
                                        <xsl:value-of select="/root/POS/TRADE/GENINFO[Name=&quot;JCP&quot;]/FIELD[Name=&quot;SephoraBINbr&quot;]/Data"/>
                                    </pfx3:SephoraBlId>
                                </xsl:if>
                            </xsl:when>
                            <xsl:otherwise>
                                <pfx3:SephoraBlId>
                                    <xsl:value-of select="&quot; &quot;"/>
                                </pfx3:SephoraBlId>
                            </xsl:otherwise>
                        </xsl:choose>
                    </ns2:CustomerDetail>
                    <ns2:TransactionTax>
                        <pfx3:TransTotalTax>
                            <xsl:value-of select="0"/>
                        </pfx3:TransTotalTax>
                        <xsl:choose>
                            <xsl:when test="exists(/root/POS/TRADE/Amt)&#xA;and&#xA;/root/POS/TRADE/GENINFO[Name=&quot;JCPCPOS&quot;]/FIELD[Name=&quot;Mode&quot;]/Data=&quot;Return&quot;">
                                <xsl:if test="/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;StoreTaxRate&quot;]/Data">
                                    <pfx3:TransTaxRate>
                                        <xsl:value-of select="number(/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;StoreTaxRate&quot;]/Data)"/>
                                    </pfx3:TransTaxRate>
                                </xsl:if>
                            </xsl:when>
                            <xsl:when test="(&#xA;&#x9;empty(/root/POS/TRADE/GENINFO[Name=&quot;TaxManualZip&quot;]/FIELD[Name=&quot;ZipCode&quot;]/Data)&#xA;)&#xA;and&#xA;(&#xA;(&#xA;exists(/root/POS/TRADE/Amt)&#xA;and&#xA;/root/POS/TRADE/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;TranType&quot;]/Data=&quot;FurniturePOS&quot; &#xA;)&#xA;and&#xA;empty(/root/POS/TRADE/GENINFO[Name=&quot;ManCatTotals&quot;]/FIELD[Name=&quot;Merchandise&quot;]/Data)&#xA;)">
                                <xsl:choose>
                                    <xsl:when test="(&#xA;exists(/root/POS/TRADE/Amt)&#xA;and&#xA;/root/POS/TRADE/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;TranType&quot;]/Data=&quot;FurniturePOS&quot; &#xA;)&#xA;and&#xA;empty(/root/POS/TRADE/GENINFO[Name=&quot;ManCatTotals&quot;]/FIELD[Name=&quot;Merchandise&quot;]/Data)">
                                        <xsl:if test="number(/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;StoreTaxRate&quot;]/Data)*1000">
                                            <pfx3:TransTaxRate>
                                                <xsl:value-of select="/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;StoreTaxRate&quot;]/Data"/>
                                            </pfx3:TransTaxRate>
                                        </xsl:if>
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="(&#xA;&#x9;empty(/root/POS/TRADE/GENINFO[Name=&quot;ManCatTotals&quot;]/FIELD[Name=&quot;Merchandise&quot;]/Data)&#xA;)&#xA;and&#xA;(&#xA;(/root/POS/TRADE/GENINFO[Name=&quot;JCP_FPOS_ORDER&quot;]/FIELD[Name=&quot;ExemptFlag&quot;]/Data=&quot;Y&quot;)&#xA;or&#xA;(exists( /root/POS/TRADE/GENINFO[Name=&quot;JCPCPOS&quot;]/FIELD[Name=&quot;TaxExemptID&quot;]/Data)&#xA;and&#xA;/root/POS/TRADE/GENINFO[Name=&quot;JCPCPOS&quot;]/FIELD[Name=&quot;Mode&quot;]/Data=&quot;Return&quot;&#xA;)&#xA;)">
                                <xsl:choose>
                                    <xsl:when test="(/root/POS/TRADE/GENINFO[Name=&quot;JCP_FPOS_ORDER&quot;]/FIELD[Name=&quot;ExemptFlag&quot;]/Data=&quot;Y&quot;)&#xA;or&#xA;(exists( /root/POS/TRADE/GENINFO[Name=&quot;JCPCPOS&quot;]/FIELD[Name=&quot;TaxExemptID&quot;]/Data)&#xA;and&#xA;/root/POS/TRADE/GENINFO[Name=&quot;JCPCPOS&quot;]/FIELD[Name=&quot;Mode&quot;]/Data=&quot;Return&quot;&#xA;)">
                                        <xsl:if test="/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;StoreTaxRate&quot;]/Data">
                                            <pfx3:TransTaxRate>
                                                <xsl:value-of select="number(/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;StoreTaxRate&quot;]/Data)*1000"/>
                                            </pfx3:TransTaxRate>
                                        </xsl:if>
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                                <pfx3:TransTaxRate>
                                    <xsl:value-of select="0"/>
                                </pfx3:TransTaxRate>
                            </xsl:otherwise>
                        </xsl:choose>
                    </ns2:TransactionTax>
                    <ns2:Extension>
                        <ns2:TransactionHeaderExt>
                            <xsl:choose>
                                <xsl:when test="exists(/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;OpenTranNumber&quot;]/Data)">
                                    <xsl:if test="/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;OpenTranNumber&quot;]/Data">
                                        <pfx3:TransNum>
                                            <xsl:value-of select="/root/POS/WORKSTATION/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;OpenTranNumber&quot;]/Data"/>
                                        </pfx3:TransNum>
                                    </xsl:if>
                                </xsl:when>
                                <xsl:when test="exists(/root/POS/EXTENSIONS/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;OpenTranNumber&quot;]/Data)">
                                    <xsl:if test="/root/POS/EXTENSIONS/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;OpenTranNumber&quot;]/Data">
                                        <pfx3:TransNum>
                                            <xsl:value-of select="/root/POS/EXTENSIONS/GENINFO[Name=&quot;JCP_DC&quot;]/FIELD[Name=&quot;OpenTranNumber&quot;]/Data"/>
                                        </pfx3:TransNum>
                                    </xsl:if>
                                </xsl:when>
                                <xsl:otherwise>
                                    <pfx3:TransNum>
                                        <xsl:value-of select="0"/>
                                    </pfx3:TransNum>
                                </xsl:otherwise>
                            </xsl:choose>
                            <pfx3:TransDuration>
                                <xsl:value-of select="if (custom:compare-date(substring-before(/root/POS/Time, 'T'),substring-before(/root/POS/StartTime, 'T')) = 1)&#xA;then&#xA;&#xA;(86400 - (( hours-from-dateTime(xs:dateTime(/root/POS/StartTime)) *3600) + &#xA;minutes-from-dateTime(xs:dateTime(/root/POS/StartTime))* 60 +&#xA;seconds-from-dateTime(xs:dateTime(/root/POS/StartTime))) )&#xA;+&#xA;&#xA;(( hours-from-dateTime(xs:dateTime(/root/POS/Time)) *3600) + &#xA;minutes-from-dateTime(xs:dateTime(/root/POS/Time))* 60 +&#xA;seconds-from-dateTime(xs:dateTime(/root/POS/Time)))&#xA;&#xA;else &#xA;&#xA;( (hours-from-dateTime(xs:dateTime(/root/POS/Time)) - hours-from-dateTime(xs:dateTime(/root/POS/StartTime))) *3600) + &#xA;(minutes-from-dateTime(xs:dateTime(/root/POS/Time)) - minutes-from-dateTime(xs:dateTime(/root/POS/StartTime))) * 60 +&#xA;seconds-from-dateTime(xs:dateTime(/root/POS/Time)) -  seconds-from-dateTime(xs:dateTime(/root/POS/StartTime))"/>
                            </pfx3:TransDuration>
                            <pfx3:AuditMemoInd>
                                <xsl:value-of select="&quot;N&quot;"/>
                            </pfx3:AuditMemoInd>
                            <pfx3:DataCollectVersion>
                                <xsl:value-of select="&quot;3&quot;"/>
                            </pfx3:DataCollectVersion>
                            <xsl:choose>
                                <xsl:when test="exists(/root/POS/TRADE/GENINFO[Name=&quot;RegisterInfo&quot;]/FIELD[Name=&quot;LocationId&quot;]/Data)">
                                    <pfx3:LocationId>
                                        <xsl:value-of select="if (string-length(/root/POS/TRADE/GENINFO[Name=&quot;RegisterInfo&quot;]/FIELD[Name=&quot;LocationId&quot;]/Data)>0)&#xA;then&#xA;substring((/root/POS/TRADE/GENINFO[Name=&quot;RegisterInfo&quot;]/FIELD[Name=&quot;LocationId&quot;]/Data), 1)&#xA;else&#xA;(/root/POS/TRADE/GENINFO[Name=&quot;RegisterInfo&quot;]/FIELD[Name=&quot;LocationId&quot;]/Data)"/>
                                    </pfx3:LocationId>
                                </xsl:when>
                                <xsl:otherwise>
                                    <pfx3:LocationId>
                                        <xsl:value-of select="&quot;&quot;"/>
                                    </pfx3:LocationId>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:choose>
                                <xsl:when test="exists(/root/POS/TRADE/GENINFO[Name=&quot;RegisterInfo&quot;]/FIELD[Name=&quot;LocationId&quot;]/Data)">
                                    <pfx3:TerminalLocationId>
                                        <xsl:value-of select="if (string-length(/root/POS/TRADE/GENINFO[Name=&quot;RegisterInfo&quot;]/FIELD[Name=&quot;LocationId&quot;]/Data)>0)&#xA;then&#xA;substring((/root/POS/TRADE/GENINFO[Name=&quot;RegisterInfo&quot;]/FIELD[Name=&quot;LocationId&quot;]/Data), 1)&#xA;else&#xA;(/root/POS/TRADE/GENINFO[Name=&quot;RegisterInfo&quot;]/FIELD[Name=&quot;LocationId&quot;]/Data)"/>
                                    </pfx3:TerminalLocationId>
                                </xsl:when>
                                <xsl:otherwise>
                                    <pfx3:TerminalLocationId>
                                        <xsl:value-of select="&quot; &quot;"/>
                                    </pfx3:TerminalLocationId>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:choose>
                                <xsl:when test="exists(/root/POS/WORKSTATION/GENINFO[Name=&quot;RegisterInfo&quot;]/FIELD[Name=&quot;FlowId&quot;]/Data)">
                                    <xsl:if test="/root/POS/WORKSTATION/GENINFO[Name=&quot;RegisterInfo&quot;]/FIELD[Name=&quot;FlowId&quot;]/Data">
                                        <pfx3:FlowId>
                                            <xsl:value-of select="/root/POS/WORKSTATION/GENINFO[Name=&quot;RegisterInfo&quot;]/FIELD[Name=&quot;FlowId&quot;]/Data"/>
                                        </pfx3:FlowId>
                                    </xsl:if>
                                </xsl:when>
                                <xsl:otherwise>
                                    <pfx3:FlowId>
                                        <xsl:value-of select="&quot; &quot;"/>
                                    </pfx3:FlowId>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:choose>
                                <xsl:when test="exists(/root/POS/TRADE/ITEM/GENINFO[Name=&quot;UserInputs&quot;]/FIELD[Name=&quot;REGISTRYNUM&quot;]/Data)">
                                    <pfx3:IsGiftRegistryTran>
                                        <xsl:value-of select="&quot;Y&quot;"/>
                                    </pfx3:IsGiftRegistryTran>
                                </xsl:when>
                                <xsl:otherwise>
                                    <pfx3:IsGiftRegistryTran>
                                        <xsl:value-of select="&quot;N&quot;"/>
                                    </pfx3:IsGiftRegistryTran>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:if test="exists(/root/POS/TRADE/RESUME)">
                                <pfx3:ResumeTransInd>
                                    <xsl:value-of select="if (/root/POS/TRADE/IsResume=1)&#xA;then &quot;Y&quot;&#xA;else &quot;N&quot;"/>
                                </pfx3:ResumeTransInd>
                            </xsl:if>
                            <xsl:if test="exists(/root/POS/TRADE/RESUME)">
                                <pfx3:ResumeOrigTermNum>
                                    <xsl:value-of select="/root/POS/TRADE/RESUME[1]/OrigWkStn[1]"/>
                                </pfx3:ResumeOrigTermNum>
                            </xsl:if>
                            <xsl:if test="exists(/root/POS/TRADE/RESUME)">
                                <pfx3:ResumeOrigTranNum>
                                    <xsl:value-of select="/root/POS/TRADE/RESUME[1]/OrigTran[1]"/>
                                </pfx3:ResumeOrigTranNum>
                            </xsl:if>
                        </ns2:TransactionHeaderExt>
                    </ns2:Extension>
                </ns2:TransactionHead>
            </pfx6:JCPPOSPublisher>
</xsl:template>
<xsl:function name="custom:pad">
        <xsl:param name="field"/>
        <xsl:param name="count" as="xs:integer"/>
        <xsl:value-of select="custom:padding($field,$count,' ',true())"/>
    </xsl:function>

    <xsl:function name="custom:pad">
        <xsl:param name="field"/>
        <xsl:param name="count" as="xs:integer"/>
        <xsl:param name="character" as="xs:string"/>
        <xsl:value-of select="custom:padding($field,$count,$character,true())"/>
    </xsl:function>
<xsl:function name="custom:compare-date">
    <xsl:param name="date1"/>
    <xsl:param name="date2"/>
    <xsl:choose>
        <xsl:when test="xs:date($date1) &lt; xs:date($date2)">
    		<xsl:value-of select="'-1'"/>
    	</xsl:when>
    	<xsl:when test="xs:date($date1) &gt; xs:date($date2)">
    		<xsl:value-of select="'1'"/>
    	</xsl:when>
    	<xsl:otherwise>
    		<xsl:value-of select="'0'"/>
    	</xsl:otherwise>
    </xsl:choose>
  </xsl:function>
<xsl:function name="custom:padding" as="xs:string">
        <xsl:param name="field"/>
        <xsl:param name="count" as="xs:integer"/>
        <xsl:param name="character" as="xs:string?"/>
        <xsl:param name="isLeft" as="xs:boolean"/>
        <xsl:choose>
            <xsl:when test="$isLeft">
                <xsl:value-of
                        select="concat($field, substring(string-join(for $i in 1 to $count - string-length($field) return $character, ''), 1, $count - string-length($field)))"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of
                        select="concat(substring(string-join(for $i in 1 to $count - string-length($field) return $character, ''), 1, $count - string-length($field)), $field)"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>
</xsl:stylesheet>